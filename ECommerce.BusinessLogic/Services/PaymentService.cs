// Ecom.Services.Implementations/PaymentService.cs
using ECommerce.BusinessLogic.Interface;
using ECommerce.Repository.Entity;
using ECommerce.Repository.RepoInterface;
using ECommerce.Repository.Models;
using System;
using System.Threading.Tasks;

namespace ECommerce.BusinessLogic.Services
{
    public class PaymentService : IPaymentService
    {
        private readonly IPaymentRepository _paymentRepository;
        private readonly IOrderRepository _orderRepository; // Inject IOrderRepository here as well

        public PaymentService(IPaymentRepository paymentRepository, IOrderRepository orderRepository)
        {
            _paymentRepository = paymentRepository;
            _orderRepository = orderRepository;
        }

        public async Task<Payment> ProcessCodPaymentAsync(string orderId, decimal amount)
        {
            var payment = new Payment
            {
                OrderId = orderId,
                Amount = amount,
                PaymentMethod = PaymentMethod.COD,
                PaymentStatus = PaymentStatus.COD, // Special status for COD
                PaymentDate = DateTime.UtcNow,
                TransactionId = $"COD-{Guid.NewGuid().ToString().Substring(0, 8)}"
            };

            await _paymentRepository.AddPaymentAsync(payment);

            // Update order status to "Placed" or "Confirmed" for COD
            var order = await _orderRepository.GetOrderByIdAsync(orderId);
            if (order != null)
            {
                order.OrderStatus = "Placed (COD)"; // Or your desired COD order status
                await _orderRepository.UpdateOrderAsync(order);
            }

            return payment;
        }

        public async Task<(Payment payment, string redirectUrl)> ProcessOnlinePaymentAsync(string orderId, decimal amount)
        {
            // In a real application, this would interact with a payment gateway (e.g., Stripe, PayPal API)
            // For now, we simulate a successful initiation and redirect to a dummy gateway.

            var payment = new Payment
            {
                OrderId = orderId,
                Amount = amount,
                PaymentMethod = PaymentMethod.Online, // Could be more specific like PayPal, CreditCard etc.
                PaymentStatus = PaymentStatus.Pending, // Initial status before gateway confirmation
                PaymentDate = DateTime.UtcNow,
                TransactionId = $"TXN-{Guid.NewGuid().ToString().Substring(0, 10)}" // Placeholder
            };

            await _paymentRepository.AddPaymentAsync(payment);

            // Simulate a redirect URL to a payment gateway
            // This URL would typically be generated by the actual payment gateway.
            // For this example, we'll redirect back to our PayPalReturn action with paymentId and a dummy token.
            string simulatedGatewayRedirect = $"/Payment/PayPalReturn?paymentId={payment.PaymentId}&token=dummytoken123";

            return (payment, simulatedGatewayRedirect);
        }

        public async Task<Payment> HandlePayPalReturnAsync(string paymentId, string token)
        {
            var payment = await _paymentRepository.GetPaymentByIdAsync(paymentId);

            if (payment == null)
            {
                // Handle case where payment is not found (e.g., log error, return a default failed payment)
                // CORRECTED LINE
                return new Payment
                {
                    PaymentId = paymentId,
                    PaymentStatus = PaymentStatus.FAILED,
                    GatewayResponse = "Payment not found in database upon return from gateway." // Use GatewayResponse
                };
            }

            // Simulate gateway response - in real world, you'd verify the token with PayPal API
            bool isSuccess = token == "dummytoken123"; // Simple simulation

            if (isSuccess)
            {
                payment.PaymentStatus = PaymentStatus.COMPLETED;
                payment.GatewayResponse = "Simulated PayPal success.";
            }
            else
            {
                payment.PaymentStatus = PaymentStatus.FAILED;
                payment.GatewayResponse = "Simulated PayPal failure or invalid token.";
            }

            await _paymentRepository.UpdatePaymentAsync(payment);

            // Update associated Order status
            var order = await _orderRepository.GetOrderByIdAsync(payment.OrderId);
            if (order != null)
            {
                order.OrderStatus = payment.PaymentStatus == PaymentStatus.COMPLETED ? "Processing" : "Payment Failed";
                await _orderRepository.UpdateOrderAsync(order);
            }

            return payment;
        }

        public async Task<Payment?> GetPaymentDetailsAsync(string paymentId)
        {
            return await _paymentRepository.GetPaymentByIdAsync(paymentId);
        }
    }
}